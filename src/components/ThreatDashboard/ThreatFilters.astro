---
const severityOptions = [
  { value: '', label: 'All Severities' },
  { value: 'critical', label: 'Critical' },
  { value: 'high', label: 'High' },
  { value: 'medium', label: 'Medium' },
  { value: 'low', label: 'Low' }
];

const categoryOptions = [
  { value: '', label: 'All Categories' },
  { value: 'malware', label: 'Malware' },
  { value: 'vulnerability', label: 'Vulnerability' },
  { value: 'phishing', label: 'Phishing' },
  { value: 'ransomware', label: 'Ransomware' }
];

const timeframeOptions = [
  { value: '', label: 'All Time' },
  { value: '1', label: 'Last 24 Hours' },
  { value: '7', label: 'Last 7 Days' },
  { value: '30', label: 'Last 30 Days' }
];
---

<div class="bg-white rounded-lg shadow-sm p-4 space-y-4">
  <h3 class="font-medium text-gray-900">Filters</h3>
  
  <!-- Search -->
  <div>
    <label for="search" class="block text-sm font-medium text-gray-700">Search</label>
    <input
      type="search"
      id="search"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
      placeholder="Search threats..."
    />
  </div>

  <!-- Severity -->
  <div>
    <label for="severity" class="block text-sm font-medium text-gray-700">Severity</label>
    <select
      id="severity"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
    >
      {severityOptions.map(option => (
        <option value={option.value}>{option.label}</option>
      ))}
    </select>
  </div>

  <!-- Category -->
  <div>
    <label for="category" class="block text-sm font-medium text-gray-700">Category</label>
    <select
      id="category"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
    >
      {categoryOptions.map(option => (
        <option value={option.value}>{option.label}</option>
      ))}
    </select>
  </div>

  <!-- Timeframe -->
  <div>
    <label for="timeframe" class="block text-sm font-medium text-gray-700">Time Range</label>
    <select
      id="timeframe"
      class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm"
    >
      {timeframeOptions.map(option => (
        <option value={option.value}>{option.label}</option>
      ))}
    </select>
  </div>

  <!-- Apply/Reset -->
  <div class="flex space-x-3">
    <button
      type="button"
      id="applyFilters"
      class="flex-1 bg-blue-600 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
    >
      Apply
    </button>
    <button
      type="button"
      id="resetFilters"
      class="flex-1 bg-gray-100 text-gray-700 px-4 py-2 rounded-md text-sm font-medium hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
    >
      Reset
    </button>
  </div>
</div>

<script>
function getFilters() {
  return {
    search: (document.getElementById('search') as HTMLInputElement)?.value || '',
    severity: (document.getElementById('severity') as HTMLSelectElement)?.value || '',
    category: (document.getElementById('category') as HTMLSelectElement)?.value || '',
    timeframe: (document.getElementById('timeframe') as HTMLSelectElement)?.value || ''
  };
}

function applyFilters() {
  const filters = getFilters();
  const params = new URLSearchParams();
  
  Object.entries(filters).forEach(([key, value]) => {
    if (value) params.append(key, value);
  });

  const url = new URL(window.location.href);
  url.search = params.toString();
  window.history.pushState({}, '', url);
  
  // Trigger threat list update
  document.dispatchEvent(new CustomEvent('filtersChanged', { detail: filters }));
}

function resetFilters() {
  const elements = ['search', 'severity', 'category', 'timeframe'];
  elements.forEach(id => {
    const el = document.getElementById(id) as HTMLSelectElement | HTMLInputElement;
    if (el) el.value = '';
  });
  
  applyFilters();
}

// Event Listeners
document.getElementById('applyFilters')?.addEventListener('click', applyFilters);
document.getElementById('resetFilters')?.addEventListener('click', resetFilters);

// Initialize filters from URL
const urlParams = new URLSearchParams(window.location.search);
Object.entries(getFilters()).forEach(([key]) => {
  const value = urlParams.get(key);
  if (value) {
    const el = document.getElementById(key) as HTMLSelectElement | HTMLInputElement;
    if (el) el.value = value;
  }
});
</script>